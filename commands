#!/bin/bash
#set -e;

APP=$2
IMAGE="jeffutter/mongodb"

OLDHOME=$HOME
HOME="$DOKKU_ROOT/.mongodb"

check_exists() {
  if [[ ! -d "$DOKKU_ROOT/$APP" ]]; then
    echo "App must exist before creating mongodb storage for it"
    exit 1
  fi
}

check_app() {
  if [[ -z "$APP" ]]; then
    echo "You must specify an app name"
    exit 1
  fi
}

check_container() {
  if [[ -z "$id" ]]; then
    echo "MongoDB container not started cannot continue. Start with dokku mongodb:start"
    exit 1
  fi
}

admin_pass=$(cat "$DOKKU_ROOT/.mongodb/admin_pw")
mongodb_database="${APP//./_}-production"

db_image="jeffutter/mongodb"
id=$(docker ps | grep "$db_image":latest |  awk '{print $1}')
if [[ -n "$id" ]]; then
  mongodb_public_ip=$(docker port ${id} 27017 | awk '{split($0,a,":"); print a[1]}')
  mongodb_port=$(docker port ${id} 27017 | awk '{split($0,a,":"); print a[2]}')
  if [[ $mongodb_public_ip = "0.0.0.0" ]]; then
    mongodb_public_ip=localhost
  fi
fi

case "$1" in
  mongodb:console)
    check_container
    mongo $mongodb_public_ip:$mongodb_port -u admin -p"$admin_pass" --authenticationDatabase="admin"
    ;;
  mongodb:create)
    check_container
    check_app

    mongodb_password=$(openssl rand -base64 32|base64)
    echo $mongodb_password > "$DOKKU_ROOT/.mongodb/pass_${APP}"

    mongodb_username=$APP
    mongo $mongodb_public_ip:$mongodb_port/$mongodb_database --quiet -u admin -p"$admin_pass" --authenticationDatabase="admin" --eval "db.addUser(\"${mongodb_username}\", \"${mongodb_password}\")"
    ;;
  mongodb:delete)
    check_container
    check_app
    check_exists

    mongo $mongodb_public_ip:$mongodb_port/$mongodb_database --quiet -u admin -p"$admin_pass" --authenticationDatabase="admin" --eval "printjson(db.dropDatabase())"
    rm -f "$DOKKU_ROOT/.mongodb/pass_${APP}"
    ;;
  mongodb:list)
    check_container
    mongo $mongodb_public_ip:$mongodb_port --quiet -u admin -p"$admin_pass" --authenticationDatabase="admin" --eval "printjson(db.adminCommand('listDatabases'));" | grep name | cut -d \" -f 4 |grep -v admin | grep -v test
    ;;
  mongodb:logs)
    check_container
    docker logs dokku-mongodb | tail -n 100
    ;;
  mongodb:start)
    if [[ "$id" != "" ]]; then
      echo "MongoDB container already running with ID: ${id}"
    else
      docker run -p 27017 -v "$DOKKU_ROOT/.mongodb/data":/tmp/mongo -name dokku-mongodb -d "$IMAGE" /usr/bin/mongod --dbpath=/tmp/mongo --auth
    fi
    ;;
  mongodb:stop)
    check_container
    mongo $mongodb_public_ip:$mongodb_port/admin --quiet -u admin -p"$admin_pass" --authenticationDatabase="admin" --eval "db.shutdownServer()"
    ;;
  mongodb:status)
    if [[ "$id" != "" ]]; then
      echo "MongoDB container running with ID: ${id}"
    else
      echo "MongoDB container not running"
    fi
    ;;
  help)
    cat && cat<<EOF
    mongodb:console       Launch an admin mongodb console
    mongodb:create <app>  Create a Mongo database
    mongodb:delete <app>  Delete specified Mongo database
    mongodb:list          List all databases
    mongodb:logs          Show logs from MongoDB program
    mongodb:start         Start the MongoDB docker container if it isn't running
    mongodb:stop          Stop the MongoDB docker container
    mongodb:status        Shows status of MongoDB
EOF
    ;;
esac

HOME=$OLDHOME
